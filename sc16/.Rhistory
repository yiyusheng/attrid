ggplot(DT_mean,aes(x = utilM, y = utilCV)) + geom_point(alpha = 0.1)
ggplot(DT_mean,aes(x = utilM, y = utilCV)) + geom_point(alpha = 0.001)
ggplot(DT_mean,aes(x = log2(utilM), y = log2(utilCV))) + geom_point(alpha = 0.01)
ggplot(DT_mean,aes(x = utilM, y = utilSD)) + geom_point(alpha = 0.01)
ggplot(DT_mean,aes(x = utilM, y = utilS)) + geom_point(alpha = 0.01)
summary(DT_mean$utilS)
ggplot(DT_mean,aes(x = utilM, y = utilS)) + geom_point(alpha = 0.05)
quantileX(DT_mean$utilM)
quantileX(DT_mean$utilCV)
ggplot(DT_mean,aes(x = utilM, y = utilCV)) + geom_point(alpha = 0.01)
ggplot(DT_mean,aes(x = utilM)) + geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05) + geom_point(aes(y = utilCV),color = cbPalette[2],alpha = 0.05)
ggplot(smp_df(DT_mean,0.1),aes(x = 2^utilM)) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05)
ggplot(smp_df(DT_mean,0.1),aes(x = 2^utilM)) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.5)
ggplot(smp_df(DT_mean,0.1),aes(x = log2(utilM))) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05) +
geom_point(aes(y = utilCV),color = cbPalette[2],alpha = 0.01)
ggplot(smp_df(DT_mean,0.1),aes(x = log2(utilM))) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05) +
geom_point(aes(y = utilCV),color = cbPalette[3],alpha = 0.01)
ggplot(smp_df(DT_mean,0.1),aes(x = log2(utilM))) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05) +
geom_point(aes(y = utilCV),color = cbPalette[4],alpha = 0.01)
ggplot(smp_df(DT_mean,0.1),aes(x = log2(utilM))) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05) +
geom_point(aes(y = utilCV),color = cbPalette[6],alpha = 0.01)
ggplot(smp_df(DT_mean,0.1),aes(x = log2(utilM))) +
geom_point(aes(y = utilS),color = cbPalette[1],alpha = 0.05) +
geom_point(aes(y = utilCV),color = cbPalette[6],alpha = 0.05)
summary(DT_mean$utilCV)
a <- subset(DT_mean,utilCV > 130)
View(a)
View(DT_mean)
rm(list = ls());setwd('~/Code/R/Disk_Workload/');source('~/rhead')
load(file.path(dir_data,'duty_time_groupby_mean.Rda'))
View(DT_mean)
DT_mean <- replace_value(DT_mean,v2 = -1)
DT_mean <- subsetX(DT_mean,count > 15000)
quan_util <- with(DT_mean,data.frame(quantileX(utilM),quantileX(utilS),quantileX(utilCV)))
View(quan_util)
source('~/Code/R/R_libs_user/R_custom_lib.R')
quan_util <- with(DT_mean,data.frame(quantileX(utilM),quantileX(utilS),quantileX(utilCV)))
View(quan_util)
quan_util <- with(DT_mean,data.frame(mean = quantileX(utilM),SD = quantileX(utilS),CV = quantileX(utilCV)))
a <- subset(DT_mean,utilCV > 10)
View(a)
ggplot(a,aes(x = utilM,y = utilS,color = utilCV)) + geom_point()
ggplot(a,aes(x = utilM,y = utilS,color = utilCV)) + geom_point(alpha = 0.1)
ggplot(a,aes(x = utilM,y = utilS,color = utilCV)) + geom_point()
quan_util$id <- 0:100
ggplot(DT_mean,aes(x = utilM)) + geom_histogram(binwidth = 1)
b <- melt(table(round(DT_mean$utilM)))
ggplot(b,aes(x = Var1,y = log2(value))) + geom_bar(stat = 'identity')
ggplot(quan_util,aes(x = id,y = mean)) + geom_line() + geom_point()
ggplot(quan_util,aes(x = id,y = mean)) + geom_line() + geom_point() + xlim(c(0,33))
ggplot(subset(quan_util,id < 33),aes(x = id,y = mean)) + geom_line() + geom_point()
ggplot(subset(quan_util,id < 20),aes(x = id,y = mean)) + geom_line() + geom_point()
ggplot(subset(quan_util,id < 50),aes(x = id,y = mean)) + geom_line() + geom_point()
ggplot(subset(quan_util,id < 10),aes(x = id,y = mean)) + geom_line() + geom_point()
ggplot(subset(quan_util,id < 20),aes(x = id,y = mean)) + geom_line() + geom_point()
i = 0;ggplot(subset(quan_util,id < i + 20 & id > i),aes(x = id,y = mean)) + geom_line() + geom_point()
i = 20;ggplot(subset(quan_util,id < i + 20 & id > i),aes(x = id,y = mean)) + geom_line() + geom_point()
i = 40;ggplot(subset(quan_util,id < i + 20 & id > i),aes(x = id,y = mean)) + geom_line() + geom_point()
i = 60;ggplot(subset(quan_util,id < i + 20 & id > i),aes(x = id,y = mean)) + geom_line() + geom_point()
i = 70;ggplot(subset(quan_util,id < i + 20 & id > i),aes(x = id,y = mean)) + geom_line() + geom_point()
i = 80;ggplot(subset(quan_util,id < i + 20 & id > i),aes(x = id,y = mean)) + geom_line() + geom_point()
DT0 <- subset(DT_mean,utilM < 1)
DT1 <- subset(DT_mean,utilM < 2)
DT2 <- subset(DT_mean,utilM >= 2)
DT0 <- subset(DT_mean,utilM < 1)
DT1 <- subset(DT_mean,utilM < 2 & utilM >= 1)
DT2 <- subset(DT_mean,utilM >= 2)
ggplot(DT0,aes(x = utilM,y = utilSD,color = utilCV)) + geom_point()
ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point()
p0 <- ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_color_continuous()
p0
p0 <- ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_color_brewer()
p0
p0 <- ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_color_grey(,start = 0.1,end = 0.9)
p0 <- ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_color_grey(start = 0.1,end = 0.9)
p0
ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_color_grey()
p0 <- ggplot(DT0,aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_fill_brewer(palette='Set1')
p0
ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_fill_brewer(palette='Set2')
ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_colour_gradient(low = "white", high = "black")
ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_colour_gradient(low = "red", high = "green")
ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() +  scale_colour_gradient2()
ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_colour_gradient(low = "red", high = "green")
p0 <- ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_colour_gradient(low = "red", high = "green")
p1 <- ggplot(smp_df(DT1,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point()+ scale_colour_gradient(low = "red", high = "green")
p2 <- ggplot(smp_df(DT2,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point()+ scale_colour_gradient(low = "red", high = "green")
multiplot(p0,p1,p2,cols = 3)
DT0 <- subset(DT_mean,utilM < 1)
DT1 <- subset(DT_mean,utilM < 2 & utilM >= 1)
DT2 <- subset(DT_mean,utilM >= 2 & utilM < 10)
DT3 <- subset(DT_mean,utilM >= 10)
p0 <- ggplot(smp_df(DT0,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point() + scale_colour_gradient(low = "red", high = "green")
p1 <- ggplot(smp_df(DT1,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point()+ scale_colour_gradient(low = "red", high = "green")
p2 <- ggplot(smp_df(DT2,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point()+ scale_colour_gradient(low = "red", high = "green")
p3 <- ggplot(smp_df(DT3,0.2),aes(x = utilM,y = utilS,color = utilCV)) + geom_point()+ scale_colour_gradient(low = "red", high = "green")
multiplot(p0,p1,p2,p3,cols = 2)
cut_mean <- sort(unique(round(quan_util$mean)));DT_mean$mean_level <- cut(DT_mean$utilM,cut_mean,cut_mean[-length(cut_mean)])
View(DT_mean)
length(unique(DT_mean$mean_level))
cut_mean <- sort(unique(round(quan_util$mean)));DT_mean$mean_level <- cut(DT_mean$utilM,cut_mean,cut_mean[-length(cut_mean)])
cut_SD <- sort(unique(round(quan_util$SD)));DT_mean$SD_level <- cut(DT_mean$utilS,cut_SD,cut_SD[-length(cut_SD)])
cut_CV <- sort(unique(round(quan_util$CV)));DT_mean$CV_level <- cut(DT_mean$utilS,cut_CV,cut_CV[-length(cut_CV)])
DT_mean <- replace_value(DT_mean,v2 = -1)
cut_mean <- sort(unique(round(quan_util$mean)));DT_mean$mean_level <- fct2ori(cut(DT_mean$utilM,cut_mean,cut_mean[-length(cut_mean)]))
cut_SD <- sort(unique(round(quan_util$SD)));DT_mean$SD_level <- fct2ori(cut(DT_mean$utilS,cut_SD,cut_SD[-length(cut_SD)]))
cut_CV <- sort(unique(round(quan_util$CV)));DT_mean$CV_level <- fct2ori(cut(DT_mean$utilS,cut_CV,cut_CV[-length(cut_CV)]))
DT_mean <- replace_value(DT_mean,v2 = -1)
cut_mean <- sort(unique(round(quan_util$mean)));DT_mean$mean_level <- fct2num(cut(DT_mean$utilM,cut_mean,cut_mean[-length(cut_mean)]))
cut_SD <- sort(unique(round(quan_util$SD)));DT_mean$SD_level <- fct2num(cut(DT_mean$utilS,cut_SD,cut_SD[-length(cut_SD)]))
cut_CV <- sort(unique(round(quan_util$CV)));DT_mean$CV_level <- fct2num(cut(DT_mean$utilS,cut_CV,cut_CV[-length(cut_CV)]))
DT_mean <- replace_value(DT_mean,v2 = -1)
tb_level <- with(DT_mean,melt(table(mean_level,SD_level,CV_level)))
tb_level <- subset(tb_level,value != 0)
View(tb_level)
cut_CV
tb_level <- with(DT_mean,melt(table(mean_level,SD_level,CV_level)))
sort(unique(round(quan_util$CV)))
cut_mean <- sort(unique(round(quan_util$mean)));DT_mean$mean_level <- fct2num(cut(DT_mean$utilM,cut_mean,cut_mean[-length(cut_mean)]))
cut_SD <- sort(unique(round(quan_util$SD)));DT_mean$SD_level <- fct2num(cut(DT_mean$utilS,cut_SD,cut_SD[-length(cut_SD)]))
cut_CV <- sort(unique(round(quan_util$CV)));DT_mean$CV_level <- fct2num(cut(DT_mean$utilCV,cut_CV,cut_CV[-length(cut_CV)]))
DT_mean <- replace_value(DT_mean,v2 = -1)
tb_level <- with(DT_mean,melt(table(mean_level,SD_level,CV_level)))
tb_level <- subset(tb_level,value != 0)
rm(list = ls());source('~/rhead')
dir_dataset <- dir_data14DC
fname <- list.files(dir_dataset)
idx <- seq_len(length(fname))
i = 1
fn <- fname[i]
cat(sprintf('[%s]\t%s SATRT!!!\n',date(),fn))
load(file.path(dir_dataset,fn))
DT$time <- factor(as.Date(DT$time))
r_sta_svrid <- aggregate(DT[,3],by = list(DT$svrid),function(x)length(x))
source('~/Code/R/Disk_Workload/IO_statistic_2014/sta_base.R')
rm(list = ls());source('~/rhead')
fn <- 'data111.Rda'
cat(sprintf('[%s]\t%s SATRT!!!\n',date(),fn))
load(file.path(dir_dataset,fn))
dir_dataset <- dir_data14DC
cat(sprintf('[%s]\t%s SATRT!!!\n',date(),fn))
load(file.path(dir_dataset,fn))
DT$time <- factor(as.Date(DT$time))
r_sta_svrid <- data.frame(svrid = levels(DT$svrid),
count = as.numeric(tapply(DT$svrid,DT$svrid,count)),
sum_rps = as.numeric(tapply(DT$rps,DT$svrid,sum)),
sum_wps = as.numeric(tapply(DT$wps,DT$svrid,sum)),
sum_util = as.numeric(tapply(DT$wps,DT$svrid,sum)),
fn = fname[i])
tapply(DT$svrid,DT$svrid,count)
tapply(DT$rps,DT$svrid,sum)
tapply(DT$svrid,DT$svrid,count)
a <- tapply(DT$svrid,DT$svrid,count)
as.numeric(a)
as.numeric(tapply(DT$rps,DT$svrid,count)
)
r_sta_svrid <- data.frame(svrid = levels(DT$svrid),
count = as.numeric(tapply(DT$svrid,DT$svrid,length)),
sum_rps = as.numeric(tapply(DT$rps,DT$svrid,sum)),
sum_wps = as.numeric(tapply(DT$wps,DT$svrid,sum)),
sum_util = as.numeric(tapply(DT$wps,DT$svrid,sum)),
fn = fname[i])
fname <- list.files(dir_dataset)
i = 1
r_sta_svrid <- data.frame(svrid = levels(DT$svrid),
count = as.numeric(tapply(DT$svrid,DT$svrid,length)),
sum_rps = as.numeric(tapply(DT$rps,DT$svrid,sum)),
sum_wps = as.numeric(tapply(DT$wps,DT$svrid,sum)),
sum_util = as.numeric(tapply(DT$wps,DT$svrid,sum)),
fn = fname[i])
View(r_sta_svrid)
source('~/Code/R/Disk_Workload/IO_statistic_2014/sta_base.R')
save(r_sta_svrid,file = file.path(dir_data,'sta_base14.Rda'))
rm(list = ls());source('~/rhead')
load('file.path(dir_data,'sta_base14.Rda')')
load(file.path(dir_data,'sta_base14.Rda'))
r_sta_svrid$xps <- with(r_sta_svrid,sum_rps+sum_wps)
quantile(r_sta_svrid$xps,c(0.1,0.9))
quantile(r_sta_svrid$xps,c(0.1,0.9),na.rm = T)
155965599.9/364515.5
quantile(r_sta_svrid$sum_rps,c(0.1,0.9),na.rm = T)
quantile(r_sta_svrid$sum_rps,c(0.25,0.9),na.rm = T)
76774716/30
quantile(r_sta_svrid$sum_wps,c(0.1,0.9),na.rm = T)
56068581/349976
ggplot(r_sta_svrid,aes(x = sum_rps)) + stat_ecdf()
ggplot(r_sta_svrid,aes(x = log2(sum_rps))) + stat_ecdf()
ggplot(r_sta_svrid,aes(x = log2(sum_wps))) + stat_ecdf()
ggplot(r_sta_svrid) + stat_ecdf(aes(x = log2(sum_wps))) + stat_ecdf(aes(x = log2(sum_rps))) + + stat_ecdf(aes(x = log2(xps)))
ggplot(r_sta_svrid) + stat_ecdf(aes(x = log2(sum_wps)))
+ stat_ecdf(aes(x = log2(sum_rps)))
ggplot(r_sta_svrid) + stat_ecdf(aes(x = log2(sum_wps))) + stat_ecdf(aes(x = log2(sum_rps)))
ggplot(r_sta_svrid) + stat_ecdf(aes(x = log2(sum_wps))) + stat_ecdf(aes(x = log2(sum_rps)))  + stat_ecdf(aes(x = log2(xps)))
source('~/Code/R/Disk_Workload/sc16/sc16F1.R')
source('~/Code/R/Disk_Workload/sc16/sc16F1.R')
rm(list = ls());setwd('~/Code/R/Disk_Workload/sc16/');source('~/rhead')
source('attr_function.R')
source('sc16F1Func.R')
source('~/Code/R/Disk_Workload/sc16/sc16F1Func.R')
# F0.data load
dataLoadF1 <- function(fn,qu = 1){
load(file.path(dir_data,fn))
# tmp.cmdb <- factorX(subset(tmp.cmdb,dev_class_id != 'TS1'))
if(qu == 1){
tmp.cmdb$shTimeQu <- cut3mon(tmp.cmdb$shiptimeToRight,4)
}else{
tmp.cmdb$shTimeQu <- tmp.cmdb$shTime
}
tmp.cmdb$shTimeQuGuassian <- cut3mon(tmp.cmdb$shiptimeToRight,4.25)
tmp.f <- factorX(subset(tmp.f,svr_id %in% tmp.cmdb$svr_asset_id))
tmp.f <- mchAttr(tmp.f,tmp.cmdb,'svr_id','svr_asset_id',
c('shTimeQu','shTimeQuGuassian','mainModel',
'numMain','numModel','numDisk'))
tmp.fC <- subset(tmp.f,dev_class_id == 'C1')
tmp.cmdbC <- subset(tmp.cmdb,dev_class_id == 'C1')
tmp.fTS <- subset(tmp.f,dev_class_id != 'C1')
tmp.cmdbTS <- subset(tmp.cmdb,dev_class_id != 'C1')
list(tmp.fC,tmp.cmdbC,tmp.fTS,tmp.cmdbTS)
}
AFR_plot <- function(cm,title,attr){
names(cm)[names(cm) == attr] <- 'item'
# fit a bathtub curve based on cm
start <- 2.75
smp <- subset(cm,item >=start & item <= 3.25 & class == 'Nserv',c('item','AFR'))
x <- smp$item;y <- smp$AFR
fit <- lm(y~poly(x,2,raw = T))
x1 <- seq(start,3.25,0.05)
y1 <- predict(fit,data.frame(x = x1))
x2 <- x1 - start
y2 <- rev(y1)
fitCurve <- data.frame(item = c(x2,x1),AFR = c(y2,y1),class = 'line')
p <- ggplot(data = cm,aes(x = item,y = AFR)) +
geom_bar(aes(fill = class),stat = 'identity',position = 'dodge') +
geom_line(data = fitCurve,aes(x = item,y = AFR,color = 'The Bathtub Curve')) +
xlab('Disk Age (years)') + ylab('Failure Rate (%)') +
scale_x_continuous(breaks = seq(0,4.25,0.25),labels = c(seq(0,4,0.25),5)) +
scale_y_continuous(breaks = seq(0,10,1)) +
guides(fill = guide_legend(title=NULL),color = guide_legend(title=NULL)) +
theme_bw() +
theme(panel.background = element_rect(color = 'black'),
panel.grid.minor = element_line(size = 0.4),
panel.grid.major = element_line(colour = 'grey', linetype = 'dotted', size = 1),
#           panel.grid.major.x = element_blank(),
plot.title = element_blank(),
axis.line = element_line(color = 'black'),
axis.text = element_text(size = 26),
axis.title = element_text(size = 26),
axis.text.x = element_text(angle = 40,hjust = 1),
legend.key.width = unit(1.5,units = 'line'),
legend.key.height = unit(1.5,units = 'line'),
legend.text = element_text(size = 26),
legend.position = c(0.05,0.95),
legend.justification = c(0,1),
legend.background = element_rect(fill = alpha('grey',0.5))
)
print(p)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')), plot=p, width = 10, height = 6, dpi = 100)
p
}
AFR_plot_warranty <- function(cm,title){
cm <- subset(cm,item >= 2)
p <- ggplot(subset(cm),aes(x = as.character(item),y = AFRdiff,fill = class)) +
geom_bar(stat = 'identity',position = 'dodge') +
xlab('Disk Age (years)') + ylab('Failure Rate (%)') +
# scale_x_continuous(breaks = floor(min(cm$item)):ceiling(max(cm$item))) +
scale_y_continuous(breaks = seq(0,8,1)) +
guides(fill = guide_legend(title=NULL)) +
theme_bw() +
theme(panel.background = element_rect(color = 'black'),
panel.grid.minor = element_line(size = 0.4),
panel.grid.major = element_line(colour = 'grey', linetype = 'dotted', size = 1),
#           panel.grid.major.x = element_blank(),
plot.title = element_blank(),
axis.line = element_line(color = 'black'),
axis.text = element_text(size = 26),
axis.title = element_text(size = 26),
# axis.text.x = element_text(angle = 40,hjust = 1),
legend.key.width = unit(1.5,units = 'line'),
legend.key.height = unit(1.5,units = 'line'),
legend.text = element_text(size = 26),
legend.position = c(0.05,0.95),
legend.justification = c(0,1),
legend.background = element_rect(fill = alpha('grey',0.5))
)
print(p)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')),
plot=p, width = 10, height = 6, dpi = 100)
p
}
classExchg <- function(df){
df$class[grepl('[N|n]on',df$class)] <- 'Nserv'
df$class[!grepl('[N|n]on',df$class) & grepl('[S|s]torage',df$class)] <- 'Sserv'
df
}
cut3mon <- function(t,cutValue){
t1 <- floor(t*4)
t2 <- t1/4
# t2 <- t2 + 0.25
t2[t2 > cutValue] <- floor(t2[t2 > cutValue])
t2
}
AFR_attr_notime <- function(f,io,attr1,attr2,diskCount,dev = ""){
if(dev != ""){
f <- subset(f,grepl(dev,dClass))
io <- subset(io,grepl(dev,dClass))
}
eval(parse(text = sprintf('tio <- tableX(io$%s)',attr2)))
eval(parse(text = sprintf('tf <- tableX(f$%s)',attr1)))
tiof <- merge(tio,tf,by = 'item',all = T)
names(tiof) <- c('item','count_io','rate_io','count_f','rate_f')
tiof$AFR <- tiof$count_f/tiof$count_io/diskCount*100
if(dev == 'C'){
tiof$class <- 'Non-Storage Servers'
}else if(dev == 'TS'){
tiof$class <- 'Storage Servers'
}else if(dev == 'TS1T'){
tiof$class <- 'Storage Servers[1T]'
}else if(dev == 'TS2T'){
tiof$class <- 'Storage Servers[2T]'
}else{
tiof$class <- attr2
}
tiof <- tiof[,c('item','class','AFR','count_f','count_io','rate_f','rate_io')]
item_num <- as.numeric(fct2ori(tiof$item))
if(all(!is.na(item_num))){
tiof$item <- item_num
tiof <- tiof[order(tiof$item),]
row.names(tiof) <- NULL
}
tiof
}
virt_disk <- function(df,dc,lastTime){
# virtualize disks
colC <- c('svr_asset_id','dev_class_id','ip','use_time','dClass',
'shiptimeToLeft','shiptimeToRight')
idx.rep <- rep(seq_len(nrow(dc)),dc$numDisk)
# disk id for each server
diskidx <- unlist(tapply(idx.rep,idx.rep,function(x)seq_len(length(x))))
# copy information, add id and status
virtDC <- dc[idx.rep, colC]
virtDC$diskidx <- diskidx
virtDC$status <- 'working'
virtDC$f_time <- lastTime
virtDC <- virtDC[order(virtDC$svr_asset_id),]
virtDC$id <- seq_len(nrow(virtDC))
# divide into F and N. not all disks in F failed.Only a few disks of the server failed
virtDCF <- factorX(subset(virtDC,svr_asset_id %in% df$svr_id))
virtDCN <- factorX(subset(virtDC,!(svr_asset_id %in% df$svr_id)))
# failure list
df <- df[order(df$svr_id),]
df$id <- seq_len(nrow(df))
# extract disk id from virtDC by df
# mer <- merge(df[,c('svr_id','id')],virtDC[,c('svr_asset_id','id')],
#            by.x = 'svr_id',by.y = 'svr_asset_id',all.x = T)
# mer <- mer[order(mer$id.x,mer$id.y),]
# idx.dc <- split(mer$id.y,f = mer$svr_id)
# index establish
splitF <- split(seq_len(nrow(df)),df$svr_id)
splitC <- split(seq_len(nrow(virtDCF)),virtDCF$svr_asset_id)
svridF <- levels(df$svr_id)
tmpCol <- list()
newvirtDCF <- lapply(seq_len(length(svridF)),function(i){
# print(i)
f <- df[splitF[[i]],]
c <- virtDCF[splitC[[i]],]
len.f <- nrow(f)
len.c <- nrow(c)
max.c <- max(c$diskidx)
# append new item after the last disk id
# copy len.f items of the last item of c[len.c]
# use_time means the start use time after inserting a new disk, then it equals to the time fails
tmp <- c[rep(len.c,len.f),]
tmp$diskidx <- tmp$diskidx + 1:len.f
tmp$use_time <- f$f_time
c <- rbind(c,tmp)
# modify status to failed for disks with low diskid
c$status[1:len.f] <- 'failed'
c$f_time[1:len.f] <- f$f_time
c
})
newvirtDCF <- do.call(rbind,newvirtDCF)
virtDC <- rbind(newvirtDCF,virtDCN)
virtDC
}
ioAFR <- function(io,f,attr,diskCount = 1){
t1 <- melt(table(io[,attr]))
t2 <- melt(table(f[,attr]))
if(length(attr) == 1){
names(t1)[1] <- attr
names(t2)[1] <- attr
}
tMerge <- merge(t1,t2,by = attr,all = T)
names(tMerge) <- c(attr,'count','fCount')
tMerge$fCount[is.na(tMerge$fCount)] <- 0
tMerge$AFR <- tMerge$fCount/tMerge$count/diskCount*100
tMerge <- subset(tMerge,!is.na(AFR))
}
source('~/Code/R/Disk_Workload/sc16/sc16F1Func.R')
source('~/Code/R/Disk_Workload/sc16/sc16F1Func.R')
source('~/Code/R/Disk_Workload/sc16/sc16F1.R')
rm(list = ls());setwd('~/Code/R/Disk_Workload/sc16/');source('~/rhead')
source('attr_function.R')
source('sc16F1Func.R')
list[tmp.fC,tmp.cmdbC,tmp.fTS,tmp.cmdbTS] <- dataLoadF1('dataPrepareAFR13.Rda')
# S1. compute the failure rate
at <- 'shTimeQu'
cmC <- ioAFR(tmp.cmdbC,tmp.fC,at,1)
# cmC$AFR <- cmC$AFR*5
cmC$class <- 'Nserv'
cmC$AFR[cmC$shTimeQu == 5] <- 4.13443
cmTS <- ioAFR(tmp.cmdbTS,tmp.fTS,at,12)
# cmTS$AFR <- cmTS$AFR*5
cmTS$class <- 'Sserv'
cmAgeFr <- rbind(cmC,cmTS)
cmAgeFr$shTimeQu[cmAgeFr$shTimeQu == 5] <- 4.25
p1 <- AFR_plot(cmAgeFr,'fig1','shTimeQu')
at <- 'shTimeQuGuassian'
cm1B <- AFR_attr_notime(tmp.f,tmp.cmdb,at,at,1,dev = 'C')
cm1B$AFR[cm1B$item == 5] <- 4.13443
x1 <- cm1B$item[1:12];y1 <- cm1B$AFR[1:12]
cm1B$AFRpredict <- predict(lm(y1~x1),data.frame(x1 = cm1B$item))
cm1B$AFRdiff <- cm1B$AFR - cm1B$AFRpredict
cm2B <- AFR_attr_notime(tmp.f,tmp.cmdb,at,at,12,dev = 'TS')
x2 <- cm2B$item[1:12];y2 <- cm2B$AFR[1:12]
cm2B$AFRpredict <- predict(lm(y2~x2),data.frame(x2 = cm2B$item))
cm2B$AFRdiff <- cm2B$AFR - cm2B$AFRpredict
cmB <- rbind(cm1B,cm2B)
cmB <- factorX(subset(cmB,!is.na(AFR)))
cmB <- classExchg(cmB)
cmB <- subset(cmB,item >=3 & item <= 4)
p2 <- AFR_plot_warranty(cmB,'fig1Warranty')
cm1B <- AFR_attr_notime(tmp.f,tmp.cmdb,at,at,1,dev = 'C')
View(tmp.fC)
View(dataLoadF1)
View(dataLoadF1)
View(cut3mon)
View(cut3mon)
rm(list = ls());setwd('~/Code/R/Disk_Workload/sc16/');source('~/rhead')
source('attr_function.R')
source('sc16F1Func.R')
list[tmp.fC,tmp.cmdbC,tmp.fTS,tmp.cmdbTS] <- dataLoadF1('dataPrepareAFR13.Rda')
View(ioAFR)
View(ioAFR)
at <- 'shTimeQu'
cmC <- ioAFR(tmp.cmdbC,tmp.fC,attr = at,diskCount = 1)
View(cmC)
cmC$class <- 'Nserv'
cmC$AFR[cmC$shTimeQu == 5] <- 4.13443
cmTS <- ioAFR(tmp.cmdbTS,tmp.fTS,at,12)
cmTS$class <- 'Sserv'
cmAgeFr <- rbind(cmC,cmTS)
cmAgeFr$shTimeQu[cmAgeFr$shTimeQu == 5] <- 4.25
p1 <- AFR_plot(cmAgeFr,'fig1','shTimeQu')
View(cmAgeFr)
View(cmC)
cmC$rate <- array_rate(cmC$count)
a <- subset(tmp.fC,shTimeQu == 3.5)
View(a)
table(a$dev_class_id)
table(a$group)
summary(a$f_time)
summary(tmp.fTS$f_time)
at <- 'shTimeQuGuassian'
cm1B <- AFR_attr_notime(tmp.f,tmp.cmdb,at,at,1,dev = 'C')
list[tmp.fC,tmp.cmdbC,tmp.fTS,tmp.cmdbTS,tmp.f,tmp.cmdb] <- dataLoadF1('dataPrepareAFR13.Rda')
at <- 'shTimeQuGuassian'
cm1B <- AFR_attr_notime(tmp.f,tmp.cmdb,at,at,1,dev = 'C')
source('~/Code/R/Disk_Workload/sc16/sc16F1Func.R')
cm1B <- AFR_attr_notime(tmp.f,tmp.cmdb,at,at,1,dev = 'C')
f = tmp.f
io <- tmp.cmdb
attr = 'shTimeQuGuassian'
diskCOunt = 1
diskCount = 1
dev = 'C'
if(dev != ""){
f <- subset(f,grepl(dev,dClass))
io <- subset(io,grepl(dev,dClass))
}
tio <- setNames(melt(table(io[[attr]])),c('item','count'))
tf <- setNames(melt(table(f[[attr]])),c('item','count'))
View(tf)
View(tio)
tiof <- merge(tio,tf,by = 'item',all = T)
names(tiof) <- c('item','count_io','count_f')
tiof$AFR <- tiof$count_f/tiof$count_io/diskCount*100
if(dev == 'C'){
tiof$class <- 'Non-Storage Servers'
}else if(dev == 'TS'){
tiof$class <- 'Storage Servers'
}else if(dev == 'TS1T'){
tiof$class <- 'Storage Servers[1T]'
}else if(dev == 'TS2T'){
tiof$class <- 'Storage Servers[2T]'
}else{
tiof$class <- attr
}
tiof <- tiof[,c('item','class','AFR','count_f','count_io')]
View(tiof)
item_num <- as.numeric(fct2ori(tiof$item))
item_num <- fct2num(tiof$item)
all(!is.na(item_num))
is.na(item_num)
View(tio)
View(tiof)
item_num <- tiof$item
